{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, defineNestedType, makeSource } from \"contentlayer/source-files\";\nimport sizeOf from \"image-size\";\nimport path from \"path\";\nimport fs from \"fs\";\n\nconst Image = defineNestedType(() => ({\n  name: \"Image\",\n  fields: {\n    src: {\n      type: \"string\",\n      required: true,\n    },\n    width: {\n      type: \"number\",\n      required: true,\n    },\n    height: {\n      type: \"number\",\n      required: true,\n    },\n  },\n}));\n\nconst Link = defineNestedType(() => ({\n  name: \"Link\",\n  fields: {\n    url: {\n      type: \"string\",\n      required: false,\n    },\n    github: {\n      type: \"boolean\",\n      default: false,\n      required: true,\n    },\n  },\n}));\n\nexport const Project = defineDocumentType(() => ({\n  name: \"Project\",\n  filePathPattern: `**/*.md`,\n  fields: {\n    title: {\n      type: \"string\",\n      description: \"The title of the projects\",\n      required: true,\n    },\n    date: {\n      type: \"date\",\n      description: \"When it was finished\",\n      required: true,\n    },\n    tags: {\n      type: \"list\",\n      of: { type: \"string\" },\n      description: \"List of stack used\",\n      required: true,\n    },\n    shortDescription: {\n      type: \"string\",\n      description: \"Short decription\",\n      required: true,\n    },\n    links: {\n      type: \"list\",\n      of: Link,\n      description: \"List of Links related to the project\",\n      required: true,\n    },\n    images: {\n      type: \"list\",\n      of: Image,\n      description: \"list of Images with width and height values\",\n    },\n  },\n  computedFields: {\n    url: {\n      type: \"string\",\n      resolve: (project) => `/projects/${project._raw.flattenedPath}`,\n    },\n    images: {\n      type: \"nested\",\n      of: \"Image[]\",\n      description: \"list of Images with width and height values\",\n      resolve: (project) => {\n        const folderPath = path.join(process.cwd(), \"/public/images/projects/\", project._raw.flattenedPath);\n\n        const files = fs\n          .readdirSync(folderPath) //required folders\n          .filter((f) => !f.startsWith(\".\"))\n          .sort(function sortFileByName(a, b) {\n            const [img1] = a.split(\".\");\n            const [img2] = b.split(\".\");\n\n            return Number(img1) < Number(img2) ? -1 : 1;\n          });\n\n        const images = files.map(function getImageDimensions(image) {\n          const imagePath = path.join(\"/images/projects/\", project._raw.flattenedPath, image);\n          const imageDimensions = sizeOf(path.join(folderPath, image));\n\n          return {\n            src: imagePath,\n            width: imageDimensions.width,\n            height: imageDimensions.height,\n          };\n        });\n\n        return images;\n      },\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: \"./projects\",\n  documentTypes: [Project],\n});\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB,kBAAkB;AACjE,OAAO,YAAY;AACnB,OAAO,UAAU;AACjB,OAAO,QAAQ;AAEf,IAAM,QAAQ,iBAAiB,OAAO;AAAA,EACpC,MAAM;AAAA,EACN,QAAQ;AAAA,IACN,KAAK;AAAA,MACH,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,EACF;AACF,EAAE;AAEF,IAAM,OAAO,iBAAiB,OAAO;AAAA,EACnC,MAAM;AAAA,EACN,QAAQ;AAAA,IACN,KAAK;AAAA,MACH,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,MACT,UAAU;AAAA,IACZ;AAAA,EACF;AACF,EAAE;AAEK,IAAM,UAAU,mBAAmB,OAAO;AAAA,EAC/C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA,MACrB,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,kBAAkB;AAAA,MAChB,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,IAAI;AAAA,MACJ,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,IAAI;AAAA,MACJ,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,YAAY,aAAa,QAAQ,KAAK,aAAa;AAAA,IAC/D;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,IAAI;AAAA,MACJ,aAAa;AAAA,MACb,SAAS,CAAC,YAAY;AACpB,cAAM,aAAa,KAAK,KAAK,QAAQ,IAAI,GAAG,4BAA4B,QAAQ,KAAK,aAAa;AAElG,cAAM,QAAQ,GACX,YAAY,UAAU,EACtB,OAAO,CAAC,MAAM,CAAC,EAAE,WAAW,GAAG,CAAC,EAChC,KAAK,SAAS,eAAe,GAAG,GAAG;AAClC,gBAAM,CAAC,IAAI,IAAI,EAAE,MAAM,GAAG;AAC1B,gBAAM,CAAC,IAAI,IAAI,EAAE,MAAM,GAAG;AAE1B,iBAAO,OAAO,IAAI,IAAI,OAAO,IAAI,IAAI,KAAK;AAAA,QAC5C,CAAC;AAEH,cAAM,SAAS,MAAM,IAAI,SAAS,mBAAmB,OAAO;AAC1D,gBAAM,YAAY,KAAK,KAAK,qBAAqB,QAAQ,KAAK,eAAe,KAAK;AAClF,gBAAM,kBAAkB,OAAO,KAAK,KAAK,YAAY,KAAK,CAAC;AAE3D,iBAAO;AAAA,YACL,KAAK;AAAA,YACL,OAAO,gBAAgB;AAAA,YACvB,QAAQ,gBAAgB;AAAA,UAC1B;AAAA,QACF,CAAC;AAED,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,OAAO;AACzB,CAAC;",
  "names": []
}
